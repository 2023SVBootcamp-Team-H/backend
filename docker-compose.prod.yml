# Deploy Version
version: '3.7'
services:
  redis:
      # 사용할 이미지
      image: redis:latest
      # 컨테이너명
      container_name: redis
      # 접근 포트 설정(컨테이너 외부:컨테이너 내부)
      ports:
        - 6379:6379
      # 스토리지 마운트(볼륨) 설정
      volumes:
        # Server
        - ./backend/data/redis/data:/data
        - ./backend/data/redis/conf/redis.conf:/usr/local/conf/redis.conf

      # 컨테이너에 docker label을 이용해서 메타데이터 추가
      labels:
        - "name=redis"
        - "mode=standalone"
      # 컨테이너 종료시 재시작 여부 설정
      restart: always
      command: redis-server /usr/local/conf/redis.conf
      networks:
        - service_network
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      # Server
      - './backend/data/nginx/conf.d:/etc/nginx/conf.d'
      - './backend/data/nginx/nginx.conf:/etc/nginx/nginx.conf'
      - './backend/data/nginx/html:/usr/share/nginx/html'
      - './backend/data/nginx/logs:/var/log/nginx'
    restart: always
    networks:
      - service_network
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - 9100:9100
    networks:
      - service_network
  api:
    # image: ghkd110/api:latest
    build:
      context: backend/data/django_project
      dockerfile: Dockerfile
    container_name: api
    command: >
      sh -c "python manage.py makemigrations &&
            python manage.py migrate &&
            gunicorn --bind 0:5000 config.wsgi:application" 
    ports:
      - "5000:5000"
    networks:
      - service_network
    restart: always

networks:
  service_network:
    driver: bridge